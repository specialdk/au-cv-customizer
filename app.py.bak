from flask import Flask, send_from_directory, request, make_response
from flask_migrate import Migrate
from flask_mail import Mail
import stripe
import os
import logging
from dotenv import load_dotenv

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

load_dotenv()

app = Flask(__name__, static_folder='frontend-test/build', static_url_path='/')

@app.before_request
def log_request_info():
    logger.debug('Headers: %s', dict(request.headers))
    logger.debug('Method: %s', request.method)
    logger.debug('URL: %s', request.url)
    logger.debug('Data: %s', request.get_data())

# Configuration
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'your-secret-key-here')
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///cv_customizer.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER')
app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 587))
app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', 'True') == 'True'
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
app.config['UPLOAD_FOLDER'] = os.getenv('UPLOAD_FOLDER', os.path.join(os.path.dirname(os.path.abspath(__file__)), 'permanent_uploads'))
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size

# OpenAI Configuration
app.config['OPENAI_API_KEY'] = os.getenv('OPENAI_API_KEY')
app.config['OPENAI_MODEL'] = os.getenv('OPENAI_MODEL', 'gpt-3.5-turbo')

# Ensure directories exist
logger.info("Creating required directories...")
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs('instance', exist_ok=True)

# Import and initialize db
logger.info("Initializing database...")
from models import db
db.init_app(app)

# Import routes
logger.info("Importing routes...")
from routes import *

# Initialize other extensions
logger.info("Initializing other extensions...")
migrate = Migrate(app, db)
mail = Mail(app)
stripe.api_key = os.getenv('STRIPE_SECRET_KEY')

def add_cors_headers(response):
    response.headers['Access-Control-Allow-Origin'] = 'http://localhost:3002'
    response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
    response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
    response.headers['Access-Control-Allow-Credentials'] = 'true'
    return response

@app.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        response = make_response()
        add_cors_headers(response)
        return response

@app.after_request
def after_request(response):
    return add_cors_headers(response)

# Serve React App
@app.route('/')
def serve():
    return send_from_directory(app.static_folder, 'index.html')

@app.route('/<path:path>')
def serve_path(path):
    if path != "" and os.path.exists(os.path.join(app.static_folder, path)):
        return send_from_directory(app.static_folder, path)
    else:
        return send_from_directory(app.static_folder, 'index.html')

# Create database tables
logger.info("Setting up database tables...")
with app.app_context():
    try:
        # Create tables
        logger.info("Creating database tables...")
        db.create_all()
        logger.info("Database setup complete!")
    except Exception as e:
        logger.error(f"Error during database setup: {str(e)}")
        raise

if __name__ == '__main__':
    logger.info("Starting Flask server...")
    app.run(debug=True, host='localhost', port=5000)
